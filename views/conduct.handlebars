
<div id="students"></div>
<label>Start date</label>
<input id="startDate" type="text" placeholder="yyyy-mm-dd"/>
<label>End date</label>
<input id="endDate" type="text" placeholder="yyyy-mm-dd"/>
<button onclick="updateTable()">Search</button>


<div id="tableLabel"></div>
<table id="conductTable">
    <thead>
        <th>Student Name</th>
        <th>Monday</th>
        <th>Tuesday</th>
        <th>Wednesday</th>
        <th>Thursday</th>
        <th>Friday</th>
    </thead>
</table>

{{!-- <button onclick="editConduct(false)" id="editButton">Edit conduct</button> --}}
{{!-- <button onclick="saveConduct()" id="saveButton" disabled>Save</button> --}}


<script>
const weekday = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
let students = [];
let conduct = [];

const mapDateToDay = (conduct) => {
    const result = {};

    conduct.forEach((att, i) => {
        const tempDay = new Date(att.class_date).getUTCDay();
        const dayOfWeek = weekday[tempDay];
        result[dayOfWeek] = att;
    })

    return result;
}

const inputStartDate = document.getElementById("startDate");
const inputEndDate = document.getElementById("endDate");

const cleanUpTableRows = () => {
    const table = document.getElementById('conductTable');
    let tableRows = table.rows.length;

    while(--tableRows) {
        table.deleteRow(tableRows);
    }
}

const addDays = (date, days) => {
    const tempDate = new Date(date);
    const result = new Date(tempDate.setUTCDate(tempDate.getUTCDate() + days));
    return result.toISOString().split('T')[0];
}

const fetchConduct = (firstDayOfWeek, lastDayOfWeek) => {
     return fetch(`/api/conduct/${firstDayOfWeek}/${lastDayOfWeek}`, {
        method: 'GET',
    headers: { 'Content-Type': 'application/json' },
    }).then(data => data.json())
    .then(conductData => {
        conduct = [...conductData]
    }).then(() => {
        cleanUpTableRows();
        const { firstDayOfWeek, lastDayOfWeek} = calculateWeekForToday();
        document.getElementById("tableLabel").innerHTML = `Showing conduct for ${firstDayOfWeek} - ${lastDayOfWeek}`
        const table = document.getElementById("conductTable");
        
        const tbody = document.createElement('tbody');

        students.forEach((st, idx) => {
            const tr = table.insertRow();

            const stNameTd = tr.insertCell()
            stNameTd.appendChild(document.createTextNode(st.student_name))


            const tempArray = conduct.filter(att => att.student_id == st.id);

            const mappedConduct = mapDateToDay(tempArray);

            for(let i = 1; i <=5; i++) {
                const td = tr.insertCell();
                const attInput = document.createElement('input');
                attInput.readOnly = true;

                attInput.setAttribute('data-studentId', st.id);

                attInput.ondblclick = function(event) {
                  event.target.readOnly = false;
                }

                attInput.onkeypress = function(event) {
                    if(event.key == "Enter") {
                       updateConductApiCall({
                           student_id: event.target.getAttribute("data-studentId"), 
                           conduct: event.target.value, 
                           conduct_id: event.target.getAttribute("data-conductId"), 
                           class_date: event.target.getAttribute("data-classDate")
                       }).then(() => {
                           event.target.readOnly = true;
                           alert("Conduct has been updated");
                       })
                    }
                    
                }

                if (mappedConduct[weekday[i]]) {
                    attInput.value = mappedConduct[weekday[i]].conduct;
                    attInput.setAttribute('data-conductId', mappedConduct[weekday[i]].id);
                    attInput.setAttribute('data-classDate', mappedConduct[weekday[i]].class_date)
                    //td.appendChild(document.createTextNode(mappedConduct[weekday[i]]))
                } else {
                    attInput.value = "N/A";
                    attInput.setAttribute('data-classDate', addDays(firstDayOfWeek, i))
                    // td.appendChild(document.createTextNode('N/A'))
                }
                td.appendChild(attInput);
            }

        })
    })
}

fetch('/api/student', {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' },
}).then(data => data.json())
.then(studentData => {
    students = [...studentData]
})
.then(() => {
    const { firstDayOfWeek, lastDayOfWeek} = calculateWeekForToday(); 
   return fetchConduct(firstDayOfWeek, lastDayOfWeek)
})
.catch(err => {
    console.log(err.message);
    alert("Failed to load data")
})

function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) 
        month = '0' + month;
    if (day.length < 2) 
        day = '0' + day;

    return [year, month, day].join('-');
}

const calculateWeekForToday = () => {
    const todayDate = new Date(new Date().toUTCString());
    const firstDayOfWeek = new Date(todayDate.setDate(todayDate.getDate() - todayDate.getDay()))
    const lastDayOfWeek = new Date(todayDate.setDate(todayDate.getDate() - todayDate.getDay()+6))

    return {
        firstDayOfWeek: formatDate(firstDayOfWeek),
        lastDayOfWeek: formatDate(lastDayOfWeek)
    }
}

const fetchConductinput = (firstDayOfWeek, lastDayOfWeek) => {
     return fetch(`/api/conduct/${firstDayOfWeek}/${lastDayOfWeek}`, {
        method: 'GET',
    headers: { 'Content-Type': 'application/json' },
    }).then(data => data.json())
    .then(conductData => {
        conduct = [...conductData]
    }).then(() => {
        cleanUpTableRows();
        const { firstDayOfWeek, lastDayOfWeek} = calculateWeekForToday();
        //document.getElementById("tableLabel").innerHTML = `Showing conduct for ${firstDayOfWeek} - ${lastDayOfWeek}`
        const table = document.getElementById("conductTable");
        
        const tbody = document.createElement('tbody');

        students.forEach((st, idx) => {
            const tr = table.insertRow();

            const stNameTd = tr.insertCell()
            stNameTd.appendChild(document.createTextNode(st.student_name))


            const tempArray = conduct.filter(att => att.student_id == st.id);

            const mappedConduct = mapDateToDay(tempArray);

            for(let i = 1; i <=5; i++) {
                const td = tr.insertCell();
                const attInput = document.createElement('input');
                attInput.readOnly = true;

                attInput.setAttribute('data-studentId', st.id);

                attInput.ondblclick = function(event) {
                  event.target.readOnly = false;
                }

                attInput.onkeypress = function(event) {
                    if(event.key == "Enter") {
                       updateConductApiCall({
                           student_id: event.target.getAttribute("data-studentId"), 
                           conduct: event.target.value, 
                           conduct_id: event.target.getAttribute("data-conductId"), 
                           class_date: event.target.getAttribute("data-classDate")
                       }).then(() => {
                           event.target.readOnly = true;
                           alert("Conduct has been updated");
                       })
                    }
                    
                }

                if (mappedConduct[weekday[i]]) {
                    attInput.value = mappedConduct[weekday[i]].conduct;
                    attInput.setAttribute('data-conductId', mappedConduct[weekday[i]].id);
                    attInput.setAttribute('data-classDate', mappedConduct[weekday[i]].class_date)
                    //td.appendChild(document.createTextNode(mappedConduct[weekday[i]]))
                } else {
                    attInput.value = "N/A";
                    attInput.setAttribute('data-classDate', addDays(firstDayOfWeek, i))
                    // td.appendChild(document.createTextNode('N/A'))
                }
                td.appendChild(attInput);
            }

        })
    })
}
const updateTable = () => {
    const startDate = document.getElementById("startDate").value.trim();
    const endDate = document.getElementById("endDate").value.trim();
    fetchConductinput(startDate, endDate);
    document.getElementById("tableLabel").innerHTML = `Showing attendance for ${startDate} - ${endDate}`
}

const editConduct = (flag) => {
    const table = document.getElementById("conductTable");
    for (let i=1, row; row = table.rows[i]; i++){
        for(let j=1, cell; cell = row.cells[j]; j++) {
            const inputs = cell.getElementsByTagName('input');
            for(let k=0; k<inputs.length; k++) {
                inputs[k].disabled = flag;
            }
        }
    }
    document.getElementById("saveButton").disabled = false;
    document.getElementById("editButton").disabled = true;
}

const saveConduct = () => {

    editConduct(true)
    document.getElementById("saveButton").disabled = true;
    document.getElementById("editButton").disabled = false;
}

const updateConductApiCall = async (values) => {
    return fetch('/api/conduct/update', {
        method: 'POST',
        body: JSON.stringify(values),
        headers: { 'Content-Type': 'application/json' },
    }).catch(err => {
        alert("Failed to update data")
    })
}
    
</script>